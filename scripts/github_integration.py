#!/usr/bin/env python3

"""
GitHub Integration for Repository Analyzer

This module provides GitHub integration for the repository analyzer,
allowing it to create issues or branches with improvement suggestions.
"""

import os
import sys
import json
import argparse
import subprocess
from datetime import datetime

class GitHubIntegration:
    """Handles GitHub integration for repository analyzer suggestions."""
    
    def __init__(self, repo_path, token=None, username=None):
        self.repo_path = repo_path
        self.token = token or os.environ.get('GITHUB_TOKEN')
        self.username = username or os.environ.get('GITHUB_USERNAME')
        self.repo_url = self._get_repo_url()
        
    def _get_repo_url(self):
        """Get the GitHub repository URL from git config."""
        try:
            result = subprocess.run(
                ['git', 'config', '--get', 'remote.origin.url'],
                cwd=self.repo_path,
                capture_output=True,
                text=True,
                check=True
            )
            url = result.stdout.strip()
            # Convert SSH URL to HTTPS if needed
            if url.startswith('git@github.com:'):
                url = url.replace('git@github.com:', 'https://github.com/')
                if url.endswith('.git'):
                    url = url[:-4]
            return url
        except subprocess.CalledProcessError:
            print("Error: Could not determine GitHub repository URL.")
            return None
    
    def create_issues(self, suggestions, labels=None, dry_run=False):
        """Create GitHub issues for suggestions using GitHub CLI."""
        if not self.token:
            print("Error: GitHub token not provided. Set GITHUB_TOKEN environment variable or use --token.")
            return False
            
        if not self.repo_url:
            print("Error: Could not determine GitHub repository URL.")
            return False
        
        # Check if GitHub CLI is installed
        try:
            subprocess.run(['gh', '--version'], capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("Error: GitHub CLI (gh) is not installed or not in PATH.")
            print("Install from: https://cli.github.com/")
            return False
        
        # Set up GitHub CLI authentication if token is provided
        if self.token:
            os.environ['GITHUB_TOKEN'] = self.token
        
        # Process each suggestion
        created_issues = []
        for suggestion in suggestions:
            # Prepare issue title and body
            title = f"[{suggestion['category'].upper()}] {suggestion['title']}"
            
            body = f"## {suggestion['title']}\n\n"
            body += f"**Priority:** {suggestion['priority'].upper()}\n\n"
            body += f"**Category:** {suggestion['category']}\n\n"
            body += f"{suggestion['description']}\n\n"
            
            body += "**Files:**\n"
            for path in suggestion['file_paths']:
                rel_path = os.path.relpath(path, self.repo_path)
                body += f"- `{rel_path}`\n"
            
            body += "\n---\n"
            body += "*This issue was automatically generated by the ansible-hpc Repository Analyzer.*"
            
            # Prepare labels
            issue_labels = [f"analyzer:{suggestion['category']}", f"priority:{suggestion['priority']}"] 
            if labels:
                issue_labels.extend(labels)
            
            # Create the issue (or just print details in dry run mode)
            if dry_run:
                print(f"\nWould create issue: {title}")
                print(f"Labels: {', '.join(issue_labels)}")
                print(f"Body:\n{body}\n")
            else:
                try:
                    # Create issue using GitHub CLI
                    cmd = ['gh', 'issue', 'create', 
                           '--title', title, 
                           '--body', body]
                    
                    # Add labels if any
                    for label in issue_labels:
                        cmd.extend(['--label', label])
                    
                    result = subprocess.run(
                        cmd,
                        cwd=self.repo_path,
                        capture_output=True,
                        text=True,
                        check=True
                    )
                    
                    issue_url = result.stdout.strip()
                    print(f"Created issue: {issue_url}")
                    created_issues.append({
                        'title': title,
                        'url': issue_url,
                        'suggestion_id': suggestion['id']
                    })
                except subprocess.CalledProcessError as e:
                    print(f"Error creating issue: {e}")
                    print(f"Error output: {e.stderr}")
        
        return created_issues
    
    def create_branches(self, suggestions, base_branch='main', dry_run=False):
        """Create branches with improvement suggestions."""
        if not self.repo_url:
            print("Error: Could not determine GitHub repository URL.")
            return False
        
        # Check current git status
        try:
            status = subprocess.run(
                ['git', 'status', '--porcelain'],
                cwd=self.repo_path,
                capture_output=True,
                text=True,
                check=True
            )
            if status.stdout.strip():
                print("Error: Working directory is not clean. Commit or stash changes before creating branches.")
                return False
        except subprocess.CalledProcessError as e:
            print(f"Error checking git status: {e}")
            return False
        
        # Make sure we're on the base branch
        try:
            subprocess.run(
                ['git', 'checkout', base_branch],
                cwd=self.repo_path,
                capture_output=True,
                check=True
            )
            
            # Pull latest changes
            subprocess.run(
                ['git', 'pull', 'origin', base_branch],
                cwd=self.repo_path,
                capture_output=True,
                check=True
            )
        except subprocess.CalledProcessError as e:
            print(f"Error switching to base branch {base_branch}: {e}")
            return False
        
        # Group suggestions by category
        by_category = {}
        for suggestion in suggestions:
            category = suggestion['category']
            if category not in by_category:
                by_category[category] = []
            by_category[category].append(suggestion)
        
        created_branches = []
        
        # Create a branch for each category with suggestions
        for category, items in by_category.items():
            # Create branch name
            timestamp = datetime.now().strftime('%Y%m%d')
            branch_name = f"analyzer/{category}-improvements-{timestamp}"
            
            if dry_run:
                print(f"\nWould create branch: {branch_name}")
                print(f"With {len(items)} suggestions for category: {category}")
            else:
                try:
                    # Create and checkout new branch
                    subprocess.run(
                        ['git', 'checkout', '-b', branch_name],
                        cwd=self.repo_path,
                        capture_output=True,
                        check=True
                    )
                    
                    # Create a markdown file with all suggestions in this category
                    suggestions_file = os.path.join(
                        self.repo_path, 
                        f"IMPROVEMENT_SUGGESTIONS_{category.upper()}.md"
                    )
                    
                    with open(suggestions_file, 'w') as f:
                        f.write(f"# Improvement Suggestions: {category}\n\n")
                        f.write(f"*Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n\n")
                        f.write(f"This file contains {len(items)} suggestions for improving the repository.\n\n")
                        
                        for item in items:
                            f.write(f"## {item['title']}\n\n")
                            f.write(f"**Priority:** {item['priority'].upper()}\n\n")
                            f.write(f"{item['description']}\n\n")
                            
                            f.write("**Files:**\n")
                            for path in item['file_paths']:
                                rel_path = os.path.relpath(path, self.repo_path)
                                f.write(f"- `{rel_path}`\n")
                            f.write("\n---\n\n")
                    
                    # Add and commit the file
                    subprocess.run(
                        ['git', 'add', suggestions_file],
                        cwd=self.repo_path,
                        capture_output=True,
                        check=True
                    )
                    
                    commit_msg = f"Add improvement suggestions for {category}\n\n"
                    commit_msg += f"This commit contains {len(items)} suggestions generated by the Repository Analyzer."
                    
                    subprocess.run(
                        ['git', 'commit', '-m', commit_msg],
                        cwd=self.repo_path,
                        capture_output=True,
                        check=True
                    )
                    
                    print(f"Created branch: {branch_name}")
                    created_branches.append({
                        'name': branch_name,
                        'category': category,
                        'suggestion_count': len(items)
                    })
                    
                    # Switch back to base branch
                    subprocess.run(
                        ['git', 'checkout', base_branch],
                        cwd=self.repo_path,
                        capture_output=True,
                        check=True
                    )
                except subprocess.CalledProcessError as e:
                    print(f"Error creating branch {branch_name}: {e}")
                    print(f"Error output: {e.stderr if hasattr(e, 'stderr') else ''}")
                except Exception as e:
                    print(f"Error: {e}")
        
        return created_branches

def main():
    parser = argparse.ArgumentParser(description='GitHub integration for Repository Analyzer')
    parser.add_argument('--suggestions-file', required=True,
                        help='JSON file containing analyzer suggestions')
    parser.add_argument('--token', help='GitHub token (or set GITHUB_TOKEN env var)')
    parser.add_argument('--username', help='GitHub username (or set GITHUB_USERNAME env var)')
    parser.add_argument('--repo-path', default=os.getcwd(),
                        help='Path to repository (default: current directory)')
    parser.add_argument('--create-issues', action='store_true',
                        help='Create GitHub issues for suggestions')
    parser.add_argument('--create-branches', action='store_true',
                        help='Create branches with improvement suggestions')
    parser.add_argument('--base-branch', default='main',
                        help='Base branch for creating improvement branches (default: main)')
    parser.add_argument('--labels', nargs='+',
                        help='Additional labels for GitHub issues')
    parser.add_argument('--dry-run', action='store_true',
                        help='Show what would be done without making changes')
    
    args = parser.parse_args()
    
    # Load suggestions from file
    try:
        with open(args.suggestions_file, 'r') as f:
            data = json.load(f)
            if 'suggestions' in data:
                suggestions = data['suggestions']
            else:
                suggestions = data
    except (json.JSONDecodeError, FileNotFoundError) as e:
        print(f"Error loading suggestions file: {e}")
        return 1
    
    # Initialize GitHub integration
    github = GitHubIntegration(
        repo_path=args.repo_path,
        token=args.token,
        username=args.username
    )
    
    # Create issues if requested
    if args.create_issues:
        created_issues = github.create_issues(
            suggestions=suggestions,
            labels=args.labels,
            dry_run=args.dry_run
        )
        if created_issues and not args.dry_run:
            print(f"\nCreated {len(created_issues)} GitHub issues.")
    
    # Create branches if requested
    if args.create_branches:
        created_branches = github.create_branches(
            suggestions=suggestions,
            base_branch=args.base_branch,
            dry_run=args.dry_run
        )
        if created_branches and not args.dry_run:
            print(f"\nCreated {len(created_branches)} branches with improvement suggestions.")
    
    return 0

if __name__ == '__main__':
    sys.exit(main())