---
# Tasks for HPL benchmark deployment

# -------------------------------------------------------
# 1. Install dependencies
# -------------------------------------------------------
- name: Install required packages
  dnf:
    name: "{{ hpl_dependencies }}"
    state: present
  tags: [packages, dependencies]

- name: Install MPI packages
  dnf:
    name: "{{ mpi_packages }}"
    state: present
  when: not mpi_installed
  tags: [packages, mpi]

- name: Install BLAS/LAPACK packages
  dnf:
    name: "{{ blas_packages }}"
    state: present
  tags: [packages, blas]

# Add this before the BLAS installation task
- name: Install EPEL repository
  dnf:
    name: epel-release
    state: present
  when: ansible_os_family == "RedHat"
  tags: [packages, dependencies]

# -------------------------------------------------------
# 2. Set up passwordless SSH between nodes
# -------------------------------------------------------
- name: Create SSH key for root
  openssh_keypair:
    path: "{{ ssh_key_file }}"
    type: "{{ ssh_key_type }}"
    size: "{{ ssh_key_bits }}"
    state: present
  tags: [ssh]

- name: Get all compute node hostnames
  set_fact:
    compute_hosts: "{{ groups['compute'] }}"
  tags: [ssh]

- name: Ensure SSH config directory exists
  file:
    path: /root/.ssh
    state: directory
    mode: '0700'
  tags: [ssh]

- name: Fetch the public key from the control node
  fetch:
    src: "{{ ssh_key_file }}.pub"
    dest: "/tmp/id_{{ ssh_key_type }}.pub"
    flat: yes
  tags: [ssh]

- name: Distribute the public key to all compute nodes
  copy:
    src: "/tmp/id_{{ ssh_key_type }}.pub"
    dest: "/tmp/id_{{ ssh_key_type }}.pub"
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ compute_hosts }}"
  tags: [ssh]

- name: Create authorized_keys file with all compute node keys
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', '/tmp/id_' + ssh_key_type + '.pub') }}"
  delegate_to: "{{ item }}"
  with_items: "{{ compute_hosts }}"
  tags: [ssh]

- name: Configure SSH to not check host keys for compute nodes
  template:
    src: ssh_config.j2
    dest: /root/.ssh/config
    mode: '0600'
  tags: [ssh]

# -------------------------------------------------------
# 3. Download and build HPL
# -------------------------------------------------------
- name: Create HPL directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "{{ hpl_download_dir }}"
    - "{{ hpl_build_dir }}"
    - "{{ hpl_install_dir }}"
    - "{{ hpl_run_dir }}"
  tags: [hpl, setup]

- name: Download HPL source
  get_url:
    url: "{{ hpl_source_url }}"
    dest: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}.tar.gz"
  tags: [hpl, download]

- name: Extract HPL source
  unarchive:
    src: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}.tar.gz"
    dest: "{{ hpl_download_dir }}"
    remote_src: yes
    creates: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}"
  tags: [hpl, extract]

# Replace this task
- name: Copy Make.Linux_{{ mpi_implementation }} to Make.linux
  copy:
    src: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}/setup/Make.Linux_{{ mpi_implementation | regex_replace('openmpi', 'OPENMPI') | regex_replace('mpich', 'MPICH2') }}"
    dest: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}/Make.linux"
    remote_src: yes
  tags: [hpl, configure]

# With these tasks
- name: List available Make templates
  shell: ls -la {{ hpl_download_dir }}/hpl-{{ hpl_version }}/setup/
  register: make_templates
  changed_when: false
  tags: [hpl, configure]

- name: Display available Make templates
  debug:
    var: make_templates.stdout_lines
  tags: [hpl, configure]

- name: Copy Make template to Make.linux
  shell: |
    TEMPLATE=$(find {{ hpl_download_dir }}/hpl-{{ hpl_version }}/setup/ -name "Make.Linux_*" | head -1)
    if [ -n "$TEMPLATE" ]; then
      cp $TEMPLATE {{ hpl_download_dir }}/hpl-{{ hpl_version }}/Make.linux
      echo "Using template: $TEMPLATE"
      exit 0
    else
      echo "No Make template found, creating a basic one"
      exit 1
    fi
  register: template_copy
  failed_when: template_copy.rc != 0 and template_copy.rc != 1
  changed_when: template_copy.rc == 0
  tags: [hpl, configure]

- name: Create basic Make.linux if no template found
  copy:
    dest: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}/Make.linux"
    content: |
      # Basic HPL Makefile for Linux systems
      # Generated by Ansible
      
      TOPdir       = $(HOME)/hpl-{{ hpl_version }}
      MPdir        = /usr
      MPinc        = -I$(MPdir)/include
      MPlib        = $(MPdir)/lib64/libmpi.so
      
      LAdir        = /usr
      LAinc        = -I$(LAdir)/include
      LAlib        = -L$(LAdir)/lib64 -lopenblas -lpthread
      
      CC           = mpicc
      CCFLAGS      = $(HPL_DEFS) -fomit-frame-pointer -O3 -funroll-loops -W -Wall
      LINKER       = mpif77
      ARCHIVER     = ar
      ARFLAGS      = r
      RANLIB       = echo
      
      HPL_INCLUDES = -I$(TOPdir)/include $(LAinc) $(MPinc)
      HPL_LIBS     = $(LAlib) $(MPlib)
      
      # HPL include/lib
      HPL_INCLUDES = -I$(TOPdir)/include $(LAinc) $(MPinc)
      HPL_LIBS     = $(HPL_LIBDIR)/libhpl.a $(LAlib) $(MPlib)
    mode: '0644'
  when: template_copy.rc == 1
  tags: [hpl, configure]

- name: Configure HPL Makefile
  lineinfile:
    path: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}/Make.linux"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^TOPdir.*', line: 'TOPdir = $(HOME)/hpl-{{ hpl_version }}' }
    - { regexp: '^MPdir.*', line: 'MPdir = /usr' }
    - { regexp: '^LAdir.*', line: 'LAdir = /usr' }
    - { regexp: '^CC.*', line: 'CC = mpicc' }
    - { regexp: '^CCFLAGS.*', line: 'CCFLAGS = $(HPL_DEFS) -fomit-frame-pointer -O3 -funroll-loops -W -Wall' }
    - { regexp: '^LINKER.*', line: 'LINKER = mpif77' }
    - { regexp: '^ARCHIVER.*', line: 'ARCHIVER = ar' }
    - { regexp: '^ARFLAGS.*', line: 'ARFLAGS = r' }
    - { regexp: '^RANLIB.*', line: 'RANLIB = echo' }
  tags: [hpl, configure]

- name: Set BLAS library in Makefile
  lineinfile:
    path: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}/Make.linux"
    regexp: '^LAlib.*'
    line: 'LAlib = -L$(LAdir)/lib64 -lopenblas -lpthread'  # Use specific library name (openblas)
  tags: [hpl, configure]

- name: List available Make templates
  shell: ls -la {{ hpl_download_dir }}/hpl-{{ hpl_version }}/setup/
  register: make_templates
  changed_when: false
  tags: [hpl, configure]

- name: Display available Make templates
  debug:
    var: make_templates.stdout_lines
  tags: [hpl, configure]

# Replace the build task
- name: Build HPL
  shell: |
    cd {{ hpl_download_dir }}/hpl-{{ hpl_version }}
    export HOME={{ hpl_download_dir }}
    make arch=linux > {{ hpl_download_dir }}/hpl_build.log 2>&1
  register: build_result
  failed_when: false
  tags: [hpl, build]

- name: Check build result
  debug:
    msg: "Build succeeded"
  when: build_result.rc == 0
  tags: [hpl, build]

- name: Display build errors if build failed
  shell: "cat {{ hpl_download_dir }}/hpl_build.log | tail -n 50"
  register: build_errors
  when: build_result.rc != 0
  changed_when: false
  tags: [hpl, build]

- name: Show build errors
  debug:
    var: build_errors.stdout_lines
  when: build_result.rc != 0
  tags: [hpl, build]

- name: Fail if build failed and no binary exists
  fail:
    msg: "HPL build failed. Check the build log for details."
  when: build_result.rc != 0 and not (lookup('file', '{{ hpl_download_dir }}/hpl-{{ hpl_version }}/bin/linux/xhpl', errors='ignore') | length > 0)
  tags: [hpl, build]

- name: Copy HPL binary to install directory
  copy:
    src: "{{ hpl_download_dir }}/hpl-{{ hpl_version }}/bin/linux/"
    dest: "{{ hpl_install_dir }}/"
    remote_src: yes
  tags: [hpl, install]

# -------------------------------------------------------
# 4. Generate HPL.dat configuration file
# -------------------------------------------------------
- name: Calculate optimal HPL parameters
  set_fact:
    # Calculate P and Q based on number of processes
    hpl_grid_p: "{{ [2, (hpl_mpi_processes | int | sqrt | int)] | min }}"
    hpl_grid_q: "{{ (hpl_mpi_processes | int / ([2, (hpl_mpi_processes | int | sqrt | int)] | min)) | int }}"
    # Calculate memory per node in GB
    mem_gb: "{{ (ansible_memtotal_mb / 1024) | int }}"
  tags: [hpl, config]

- name: Adjust problem size based on available memory
  set_fact:
    # Use approximately 80% of available memory
    hpl_problem_size: "{{ ((mem_gb * 1024 * 0.8) | sqrt | int / 8) * 8 }}"
  tags: [hpl, config]

# Add these tasks before the "Create HPL.dat file" task
- name: Create HPL.dat.j2 template
  copy:
    dest: "{{ role_path }}/templates/HPL.dat.j2"
    content: |
      HPLinpack benchmark input file
      Innovative Computing Laboratory, University of Tennessee
      HPL.out      output file name (if any)
      6            device out (6=stdout,7=stderr,file)
      1            # of problems sizes (N)
      {{ hpl_problem_size }}         Ns
      1            # of NBs
      {{ hpl_block_size }}           NBs
      0            PMAP process mapping (0=Row-,1=Column-major)
      1            # of process grids (P x Q)
      {{ hpl_grid_p }}            Ps
      {{ hpl_grid_q }}            Qs
      16.0         threshold
      1            # of panel fact
      2            PFACTs (0=left, 1=Crout, 2=Right)
      1            # of recursive stopping criterium
      4            NBMINs (>= 1)
      1            # of panels in recursion
      2            NDIVs
      1            # of recursive panel fact.
      1            RFACTs (0=left, 1=Crout, 2=Right)
      1            # of broadcast
      1            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)
      1            # of lookahead depth
      1            DEPTHs (>=0)
      2            SWAP (0=bin-exch,1=long,2=mix)
      64           swapping threshold
      0            L1 in (0=transposed,1=no-transposed) form
      0            U  in (0=transposed,1=no-transposed) form
      1            Equilibration (0=no,1=yes)
      8            memory alignment in double (> 0)
    mode: '0644'
  delegate_to: localhost
  run_once: true
  tags: [hpl, config]

- name: Create hostfile.j2 template
  copy:
    dest: "{{ role_path }}/templates/hostfile.j2"
    content: |
      {% for host in compute_hosts %}
      {{ host }} slots={{ hostvars[host]['ansible_processor_vcpus'] | default(1) }}
      {% endfor %}
    mode: '0644'
  delegate_to: localhost
  run_once: true
  tags: [hpl, config]

- name: Create ssh_config.j2 template
  copy:
    dest: "{{ role_path }}/templates/ssh_config.j2"
    content: |
      # SSH configuration for HPL benchmark
      # Generated by Ansible
      
      {% for host in compute_hosts %}
      Host {{ host }}
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          
      {% endfor %}
    mode: '0644'
  delegate_to: localhost
  run_once: true
  tags: [ssh]

- name: Create MPI hostfile
  template:
    src: hostfile.j2
    dest: "{{ hpl_run_dir }}/hostfile"
  tags: [hpl, config]

# -------------------------------------------------------
# 5. Run HPL benchmark
# -------------------------------------------------------
- name: Run HPL benchmark
  shell: |
    cd {{ hpl_run_dir }}
    mpirun --hostfile {{ hpl_run_dir }}/hostfile -np {{ hpl_mpi_processes }} {{ hpl_install_dir }}/xhpl > {{ hpl_run_dir }}/HPL.out 2>&1
  args:
    creates: "{{ hpl_run_dir }}/HPL.out"
  when: hpl_run_benchmark
  tags: [hpl, run]

- name: Display HPL results summary
  shell: |
    grep -A 3 "WR" {{ hpl_run_dir }}/HPL.out | tail -n 2
  register: hpl_results
  changed_when: false
  when: hpl_run_benchmark
  tags: [hpl, results]

- name: Show HPL performance
  debug:
    msg: "{{ hpl_results.stdout_lines }}"
  when: hpl_run_benchmark
  tags: [hpl, results]