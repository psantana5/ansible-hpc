---
# Tasks for HPL benchmark deployment

# -------------------------------------------------------
# 1. Install dependencies
# -------------------------------------------------------
- name: Install required packages using shell
  shell: |
    dnf install -y {{ hpl_dependencies | join(' ') }}
  tags: [packages, dependencies]

- name: Install MPI packages using shell
  shell: |
    dnf install -y {{ mpi_packages | join(' ') }}
  when: not mpi_installed
  tags: [packages, mpi]

- name: Install EPEL repository using shell
  shell: |
    dnf install -y epel-release
  when: ansible_os_family == "RedHat"
  tags: [packages, dependencies]

- name: Install BLAS/LAPACK packages using shell
  shell: |
    dnf install -y {{ blas_packages | join(' ') }}
  tags: [packages, blas]

# -------------------------------------------------------
# 2. Set up passwordless SSH between nodes
# -------------------------------------------------------
- name: Create SSH key for root using shell
  shell: |
    if [ ! -f {{ ssh_key_file }} ]; then
      ssh-keygen -t {{ ssh_key_type }} -b {{ ssh_key_bits }} -f {{ ssh_key_file }} -N ""
    fi
  tags: [ssh]

- name: Get all compute node hostnames
  set_fact:
    compute_hosts: "{{ groups['compute'] }}"
  tags: [ssh]

- name: Ensure SSH config directory exists using shell
  shell: |
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
  tags: [ssh]

# -------------------------------------------------------
# 3. Download and build HPL
# -------------------------------------------------------
- name: Create HPL directories using shell
  shell: |
    mkdir -p {{ hpl_download_dir }}
    mkdir -p {{ hpl_build_dir }}
    mkdir -p {{ hpl_install_dir }}
    mkdir -p {{ hpl_run_dir }}
  tags: [hpl, setup]

- name: Check if module command is available
  shell: command -v module || echo "module command not found"
  register: module_check
  changed_when: false
  tags: [mpi, setup]

- name: Check if OpenMPI module is available
  shell: module avail openmpi 2>&1 | grep -q openmpi || echo "OpenMPI module not available"
  register: openmpi_module_check
  changed_when: false
  when: module_check.stdout != "module command not found"
  tags: [mpi, setup]

- name: Load OpenMPI module
  shell: |
    module load openmpi
    # Export the PATH to a file so it can be sourced in later tasks
    echo "export PATH=$PATH" > /tmp/mpi_path
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> /tmp/mpi_path
  when: module_check.stdout != "module command not found" and openmpi_module_check.stdout != "OpenMPI module not available"
  register: module_load
  changed_when: false
  tags: [mpi, setup]

- name: Check for MPI commands after module load
  shell: |
    source /tmp/mpi_path
    which mpicc || echo "mpicc not found"
    which mpif77 || echo "mpif77 not found"
  register: mpi_commands_check
  changed_when: false
  when: module_check.stdout != "module command not found" and openmpi_module_check.stdout != "OpenMPI module not available"
  tags: [mpi, setup]

- name: Try to find MPI in standard locations if module failed
  shell: |
    if [ -d /usr/lib64/openmpi/bin ]; then
      echo "export PATH=$PATH:/usr/lib64/openmpi/bin" > /tmp/mpi_path
      echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/openmpi/lib" >> /tmp/mpi_path
    elif [ -d /opt/openmpi/bin ]; then
      echo "export PATH=$PATH:/opt/openmpi/bin" > /tmp/mpi_path
      echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/openmpi/lib" >> /tmp/mpi_path
    else
      echo "MPI binaries not found in standard locations"
      exit 1
    fi
  register: find_mpi
  failed_when: false
  when: (module_check.stdout == "module command not found" or openmpi_module_check.stdout == "OpenMPI module not available" or 
        (mpi_commands_check is defined and (mpi_commands_check.stdout.find("mpicc not found") != -1 or mpi_commands_check.stdout.find("mpif77 not found") != -1)))
  tags: [mpi, setup]

- name: Check for Spack
  shell: command -v spack || echo "spack not found"
  register: spack_check
  changed_when: false
  when: find_mpi.rc is defined and find_mpi.rc != 0
  tags: [mpi, setup]

- name: Install OpenMPI via Spack if available
  shell: |
    spack install openmpi target=$(spack arch -t)
    spack load openmpi
    echo "export PATH=$PATH" > /tmp/mpi_path
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> /tmp/mpi_path
  when: spack_check is defined and spack_check.stdout != "spack not found" and find_mpi.rc is defined and find_mpi.rc != 0
  register: spack_install
  failed_when: false
  tags: [mpi, setup]

- name: Fail if MPI is not available
  fail:
    msg: "OpenMPI is not available. Please install OpenMPI or make sure it's in the PATH."
  when: (find_mpi.rc is defined and find_mpi.rc != 0) and 
        (spack_check is not defined or spack_check.stdout == "spack not found" or 
         spack_install is defined and spack_install.rc != 0)
  tags: [mpi, setup]

- name: Download HPL source using wget
  shell: |
    cd {{ hpl_download_dir }}
    if [ ! -f hpl-{{ hpl_version }}.tar.gz ]; then
      wget -O hpl-{{ hpl_version }}.tar.gz {{ hpl_source_url }}
    fi
  tags: [hpl, download]

- name: Extract HPL source using tar
  shell: |
    cd {{ hpl_download_dir }}
    if [ ! -d hpl-{{ hpl_version }} ]; then
      gunzip -f hpl-{{ hpl_version }}.tar.gz
      tar -xf hpl-{{ hpl_version }}.tar
    fi
  tags: [hpl, extract]

- name: List available Make templates
  shell: ls -la {{ hpl_download_dir }}/hpl-{{ hpl_version }}/setup/
  register: make_templates
  changed_when: false
  tags: [hpl, configure]

- name: Display available Make templates
  debug:
    var: make_templates.stdout_lines
  tags: [hpl, configure]

- name: Copy Make template to Make.linux
  shell: |
    cd {{ hpl_download_dir }}/hpl-{{ hpl_version }}
    TEMPLATE=$(find setup/ -name "Make.Linux_*" | head -1)
    if [ -n "$TEMPLATE" ]; then
      cp $TEMPLATE Make.linux
      echo "Using template: $TEMPLATE"
    else
      echo "No Make template found, creating a basic one"
      exit 1
    fi
  register: template_copy
  failed_when: template_copy.rc != 0 and template_copy.rc != 1
  changed_when: template_copy.rc == 0
  tags: [hpl, configure]

- name: Configure HPL Makefile using sed
  shell: |
    cd {{ hpl_download_dir }}/hpl-{{ hpl_version }}
    sed -i "s|^TOPdir.*|TOPdir = $(HOME)/hpl-{{ hpl_version }}|" Make.linux
    sed -i 's|^MPdir.*|MPdir = /usr|' Make.linux
    sed -i 's|^LAdir.*|LAdir = /usr|' Make.linux
    sed -i 's|^CC.*|CC = mpicc|' Make.linux
    sed -i 's|^CCFLAGS.*|CCFLAGS = $(HPL_DEFS) -fomit-frame-pointer -O3 -funroll-loops -W -Wall|' Make.linux
    sed -i 's|^LINKER.*|LINKER = mpif77|' Make.linux
    sed -i 's|^ARCHIVER.*|ARCHIVER = ar|' Make.linux
    sed -i 's|^ARFLAGS.*|ARFLAGS = r|' Make.linux
    sed -i 's|^RANLIB.*|RANLIB = echo|' Make.linux
    sed -i 's|^LAlib.*|LAlib = -L$(LAdir)/lib64 -lopenblas -lpthread|' Make.linux
  tags: [hpl, configure]

- name: Build HPL using make
  shell: |
    cd {{ hpl_download_dir }}/hpl-{{ hpl_version }}
    export HOME={{ hpl_download_dir }}
    source /tmp/mpi_path
    which mpicc
    which mpif77
    make arch=linux > {{ hpl_download_dir }}/hpl_build.log 2>&1
  register: build_result
  failed_when: false
  tags: [hpl, build]

- name: Display build log for debugging
  shell: "cat {{ hpl_download_dir }}/hpl_build.log"
  register: full_build_log
  changed_when: false
  tags: [hpl, build]

- name: Show full build log
  debug:
    var: full_build_log.stdout_lines
  tags: [hpl, build]

- name: Check build result
  debug:
    msg: "Build succeeded"
  when: build_result.rc == 0
  tags: [hpl, build]

- name: Display build errors if build failed
  shell: "cat {{ hpl_download_dir }}/hpl_build.log | tail -n 50"
  register: build_errors
  when: build_result.rc != 0
  changed_when: false
  tags: [hpl, build]

- name: Show build errors
  debug:
    var: build_errors.stdout_lines
  when: build_result.rc != 0
  tags: [hpl, build]

- name: Check if HPL binary exists
  shell: |
    if [ -f {{ hpl_download_dir }}/hpl-{{ hpl_version }}/bin/linux/xhpl ]; then
      echo "Binary exists"
      exit 0
    else
      echo "Binary does not exist"
      exit 1
    fi
  register: binary_check
  failed_when: false
  changed_when: false
  tags: [hpl, build]

- name: Fail if build failed and no binary exists
  fail:
    msg: "HPL build failed. Check the build log for details."
  when: build_result.rc != 0 and binary_check.rc != 0
  tags: [hpl, build]

- name: Copy HPL binary to install directory using cp
  shell: |
    mkdir -p {{ hpl_install_dir }}
    cp -r {{ hpl_download_dir }}/hpl-{{ hpl_version }}/bin/linux/* {{ hpl_install_dir }}/
  tags: [hpl, install]

# -------------------------------------------------------
# 4. Generate HPL.dat configuration file
# -------------------------------------------------------
- name: Calculate optimal HPL parameters
  set_fact:
    # Calculate P and Q based on number of processes
    hpl_grid_p: "{{ [2, (hpl_mpi_processes | int | sqrt | int)] | min }}"
    hpl_grid_q: "{{ (hpl_mpi_processes | int / ([2, (hpl_mpi_processes | int | sqrt | int)] | min)) | int }}"
    # Calculate memory per node in GB
    mem_gb: "{{ (ansible_memtotal_mb / 1024) | int }}"
  tags: [hpl, config]

- name: Adjust problem size based on available memory
  set_fact:
    # Use approximately 80% of available memory
    hpl_problem_size: "{{ ((mem_gb * 1024 * 0.8) | sqrt | int / 8) * 8 }}"
  tags: [hpl, config]

- name: Create HPL.dat file using shell
  shell: |
    cat > {{ hpl_run_dir }}/HPL.dat << EOF
    HPLinpack benchmark input file
    Innovative Computing Laboratory, University of Tennessee
    HPL.out      output file name (if any)
    6            device out (6=stdout,7=stderr,file)
    1            # of problems sizes (N)
    {{ hpl_problem_size }}         Ns
    1            # of NBs
    {{ hpl_block_size }}           NBs
    0            PMAP process mapping (0=Row-,1=Column-major)
    1            # of process grids (P x Q)
    {{ hpl_grid_p }}            Ps
    {{ hpl_grid_q }}            Qs
    16.0         threshold
    1            # of panel fact
    2            PFACTs (0=left, 1=Crout, 2=Right)
    1            # of recursive stopping criterium
    4            NBMINs (>= 1)
    1            # of panels in recursion
    2            NDIVs
    1            # of recursive panel fact.
    1            RFACTs (0=left, 1=Crout, 2=Right)
    1            # of broadcast
    1            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)
    1            # of lookahead depth
    1            DEPTHs (>=0)
    2            SWAP (0=bin-exch,1=long,2=mix)
    64           swapping threshold
    0            L1 in (0=transposed,1=no-transposed) form
    0            U  in (0=transposed,1=no-transposed) form
    1            Equilibration (0=no,1=yes)
    8            memory alignment in double (> 0)
    EOF
  tags: [hpl, config]

- name: Create MPI hostfile using shell
  shell: |
    cat > {{ hpl_run_dir }}/hostfile << EOF
    {% for host in compute_hosts %}
    {{ host }} slots={{ hostvars[host]['ansible_processor_vcpus'] | default(1) }}
    {% endfor %}
    EOF
  tags: [hpl, config]

# -------------------------------------------------------
# 5. Run HPL benchmark
# -------------------------------------------------------
- name: Run HPL benchmark using mpirun
  shell: |
    cd {{ hpl_run_dir }}
    if [ ! -f {{ hpl_run_dir }}/HPL.out ]; then
      mpirun --hostfile {{ hpl_run_dir }}/hostfile -np {{ hpl_mpi_processes }} {{ hpl_install_dir }}/xhpl > {{ hpl_run_dir }}/HPL.out 2>&1
    fi
  when: hpl_run_benchmark
  tags: [hpl, run]

- name: Display HPL results summary
  shell: |
    grep -A 3 "WR" {{ hpl_run_dir }}/HPL.out | tail -n 2
  register: hpl_results
  changed_when: false
  when: hpl_run_benchmark
  tags: [hpl, results]

- name: Show HPL performance
  debug:
    msg: "{{ hpl_results.stdout_lines }}"
  when: hpl_run_benchmark
  tags: [hpl, results]

- name: Check for required build tools
  shell: |
    which gcc
    which g++
    which gfortran
    which make
    which mpif77 || echo "mpif77 not found"
    which mpicc || echo "mpicc not found"
  register: build_tools
  changed_when: false
  tags: [hpl, debug]

- name: Show available build tools
  debug:
    var: build_tools.stdout_lines
  tags: [hpl, debug]

- name: Check for BLAS libraries
  shell: |
    ls -la /usr/lib64/libopenblas* || echo "OpenBLAS not found in /usr/lib64"
    ls -la /usr/lib/libopenblas* || echo "OpenBLAS not found in /usr/lib"
  register: blas_libs
  changed_when: false
  tags: [hpl, debug]

- name: Show BLAS libraries
  debug:
    var: blas_libs.stdout_lines
  tags: [hpl, debug]
