#!/bin/bash
# HPC Cluster Backup Script
# Generated by Ansible

# Load configuration
source {{ backup_script_dir }}/backup.conf

# Set up logging
exec > >(tee -a ${BACKUP_LOG_DIR}/backup_$(date +%Y%m%d).log) 2>&1

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Function to clean up old backups
cleanup_old_backups() {
    local backup_type=$1
    local retention_days=${BACKUP_RETENTION_DAYS}
    
    log "Cleaning up old $backup_type backups (older than $retention_days days)..."
    find ${BACKUP_BASE_DIR}/$backup_type -type f -mtime +$retention_days -delete
    find ${BACKUP_BASE_DIR}/$backup_type -type d -empty -delete
}

# Function to backup user data
backup_user_data() {
    log "Starting user data backup..."
    
    # Create backup directory with timestamp
    local backup_date=$(date +%Y%m%d_%H%M%S)
    local backup_dir="${BACKUP_BASE_DIR}/user_data/${backup_date}"
    mkdir -p $backup_dir
    
    # Backup each user directory
    for dir in ${USER_DIRS[@]}; do
        if [ -d "$dir" ]; then
            log "Backing up $dir to $backup_dir/$(basename $dir)"
            rsync ${RSYNC_OPTIONS} $dir/ $backup_dir/$(basename $dir)/
            if [ $? -eq 0 ]; then
                log "Successfully backed up $dir"
            else
                log "ERROR: Failed to backup $dir"
                return 1
            fi
        else
            log "WARNING: Directory $dir does not exist, skipping"
        fi
    done
    
    # Create latest symlink
    rm -f ${BACKUP_BASE_DIR}/user_data/latest
    ln -s $backup_dir ${BACKUP_BASE_DIR}/user_data/latest
    
    # Cleanup old backups
    cleanup_old_backups "user_data"
    
    log "User data backup completed successfully"
    return 0
}

# Function to backup configuration files
backup_configs() {
    log "Starting configuration backup..."
    
    # Create backup directory with timestamp
    local backup_date=$(date +%Y%m%d_%H%M%S)
    local backup_dir="${BACKUP_BASE_DIR}/configs/${backup_date}"
    mkdir -p $backup_dir
    
    # Backup each configuration directory
    for dir in ${CONFIG_DIRS[@]}; do
        if [ -d "$dir" ]; then
            log "Backing up $dir to $backup_dir/$(basename $dir)"
            rsync ${RSYNC_OPTIONS} $dir/ $backup_dir/$(basename $dir)/
            if [ $? -eq 0 ]; then
                log "Successfully backed up $dir"
            else
                log "ERROR: Failed to backup $dir"
                return 1
            fi
        else
            log "WARNING: Directory $dir does not exist, skipping"
        fi
    done
    
    # Create latest symlink
    rm -f ${BACKUP_BASE_DIR}/configs/latest
    ln -s $backup_dir ${BACKUP_BASE_DIR}/configs/latest
    
    # Cleanup old backups
    cleanup_old_backups "configs"
    
    log "Configuration backup completed successfully"
    return 0
}

# Function to backup databases
backup_slurm_db() {
    log "Starting SLURM database backup..."
    
    # Create backup directory with timestamp
    local backup_date=$(date +%Y%m%d_%H%M%S)
    local backup_dir="${BACKUP_BASE_DIR}/slurm_db/${backup_date}"
    mkdir -p $backup_dir
    
    # Backup SLURM database
    log "Backing up SLURM database to $backup_dir/slurm_acct_db.sql"
    mysqldump -u ${SLURM_DB_USER} -h ${SLURM_DB_HOST} ${SLURM_DB_NAME} > $backup_dir/slurm_acct_db.sql
    if [ $? -eq 0 ]; then
        # Compress the backup
        gzip $backup_dir/slurm_acct_db.sql
        log "Successfully backed up SLURM database"
    else
        log "ERROR: Failed to backup SLURM database"
        return 1
    fi
    
    # Create latest symlink
    rm -f ${BACKUP_BASE_DIR}/slurm_db/latest
    ln -s $backup_dir ${BACKUP_BASE_DIR}/slurm_db/latest
    
    # Cleanup old backups
    cleanup_old_backups "slurm_db"
    
    log "SLURM database backup completed successfully"
    return 0
}

# Main execution
if [ $# -lt 1 ]; then
    log "ERROR: No backup type specified"
    log "Usage: $0 {user_data|configs|slurm_db}"
    exit 1
fi

# Check if backup directory is available
if [ ! -d "$BACKUP_BASE_DIR" ]; then
    log "ERROR: Backup directory $BACKUP_BASE_DIR does not exist"
    exit 1
fi

# Run the specified backup
case "$1" in
    user_data)
        backup_user_data
        exit $?
        ;;
    configs)
        backup_configs
        exit $?
        ;;
    slurm_db)
        backup_slurm_db
        exit $?
        ;;
    *)
        log "ERROR: Invalid backup type: $1"
        log "Usage: $0 {user_data|configs|slurm_db}"
        exit 1
        ;;
esac