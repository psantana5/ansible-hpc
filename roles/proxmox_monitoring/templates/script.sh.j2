#!/bin/bash

# Script para monitoreo de consumo energ√©tico en Proxmox con integraci√≥n Prometheus
# y recomendaciones de eficiencia energ√©tica

# Verificar e instalar dependencias necesarias
check_dependencies() {
  for cmd in bc curl python3; do
    if ! command -v $cmd &> /dev/null; then
      echo "üì¶ Instalando $cmd..."
      apt-get update && apt-get install -y $cmd
    fi
  done

  # Verificar si pip est√° instalado
  if ! command -v pip3 &> /dev/null; then
    echo "üì¶ Instalando pip3..."
    apt-get update && apt-get install -y python3-pip
  fi
}  

# Valores base de consumo (en vatios)
power_idle={{ power_idle | default(30) }}   # Consumo en reposo del nodo
power_vm_base={{ power_vm_base | default(5) }} # Consumo base estimado por VM encendida

# Funci√≥n para calcular el consumo energ√©tico
calculate_power_usage() {
  echo "üîç Midiendo consumo en base a uso de CPU..."
  echo

  # Obtener lista de VMs activas
  vms=$(qm list | awk '/running/ {print $1}')

  # Contador de uso total de CPU
  cpu_usage_total=0
  vm_data=""
  vm_count=0

  # Recorrer cada VM activa
  for vmid in $vms; do
    # Obtener PID del proceso de la VM
    pid=$(pgrep -f "kvm -id $vmid")
    vm_count=$((vm_count + 1))

    # Obtener uso de CPU de ese PID (puede ser m√°s de uno, usamos suma)
    cpu_vm=0
    if [ -n "$pid" ]; then
      for p in $pid; do
        cpu=$(ps -p $p -o %cpu= | awk '{sum+=$1} END {print sum}')
        cpu_vm=$(echo "$cpu_vm + $cpu" | bc)
        cpu_usage_total=$(echo "$cpu_usage_total + $cpu" | bc)
      done
    fi

    # Obtener nombre de la VM
    name=$(qm config $vmid | grep ^name | awk '{print $2}')
    
    # Sanitize the VM name to remove problematic characters for Prometheus
    sanitized_name=$(echo "$name" | tr -d '?"\\\n')
    
    # Calcular estimaci√≥n de consumo para la VM
    power_vm=$(echo "$power_vm_base + ($power_idle * $cpu_vm / 100)" | bc -l | xargs printf "%.2f")
    
    # Calculate efficiency (W/CPU%) for the VM - avoid division by zero
    if (( $(echo "$cpu_vm > 0" | bc -l) )); then
      efficiency_vm=$(echo "scale=4; $power_vm / $cpu_vm" | bc -l | xargs printf "%.4f")
    else
      efficiency_vm="0.0000"
    fi
    
    # Guardar datos para Prometheus - Fix the newline issue by using proper formatting
    vm_data="${vm_data}
# HELP proxmox_vm_power_usage_watts Estimated power usage for VM in watts
# TYPE proxmox_vm_power_usage_watts gauge
proxmox_vm_power_usage_watts{vmid=\"$vmid\",name=\"$sanitized_name\"} $power_vm
# HELP proxmox_vm_cpu_usage CPU usage percentage for VM
# TYPE proxmox_vm_cpu_usage gauge
proxmox_vm_cpu_usage{vmid=\"$vmid\",name=\"$sanitized_name\"} $cpu_vm
# HELP proxmox_vm_power_efficiency Power efficiency for VM (W/CPU%)
# TYPE proxmox_vm_power_efficiency gauge
proxmox_vm_power_efficiency{vmid=\"$vmid\",name=\"$sanitized_name\"} $efficiency_vm"
    
    echo "üñ•Ô∏è  VM $name (ID $vmid): ${cpu_vm}% CPU -> ~${power_vm} W (${efficiency_vm} W/CPU%)"
  done

  # Evitar valores vac√≠os
  if [[ -z "$cpu_usage_total" ]]; then
    cpu_usage_total=0
  fi

  # Calcular el consumo total estimado del nodo
  power_total=$(echo "$power_idle + ($power_idle * $cpu_usage_total / 100)" | bc -l | xargs printf "%.2f")

  if [[ -z "$power_total" ]]; then
    power_total="0.00"
  fi

  echo "‚ö° Consumo total del nodo: $power_total W"
  echo "üß† Uso total CPU por VMs: ${cpu_usage_total}%"
  echo "üíª N√∫mero de VMs activas: $vm_count"
  echo

  # Generar recomendaciones de eficiencia
  generate_recommendations "$power_total" "$cpu_usage_total" "$vm_count"

  # Crear archivo de m√©tricas para Prometheus
  cat > /tmp/proxmox_power_metrics.prom << EOF
# HELP proxmox_node_power_usage_watts Estimated total power usage for the node in watts
# TYPE proxmox_node_power_usage_watts gauge
proxmox_node_power_usage_watts $power_total
# HELP proxmox_node_vm_cpu_usage_total Total CPU usage percentage from all VMs
# TYPE proxmox_node_vm_cpu_usage_total gauge
proxmox_node_vm_cpu_usage_total $cpu_usage_total
# HELP proxmox_node_vm_count Number of running VMs
# TYPE proxmox_node_vm_count gauge
proxmox_node_vm_count $vm_count
$vm_data
EOF
}

# Funci√≥n para generar recomendaciones de eficiencia energ√©tica
generate_recommendations() {
  local power_total=$1
  local cpu_usage_total=$2
  local vm_count=$3
  
  echo "üå± Recomendaciones de eficiencia energ√©tica:"
  echo "------------------------------------------"
  
  # Convertir a n√∫meros para comparaci√≥n
  power_num=$(echo "$power_total" | sed 's/\.//g')
  cpu_num=$(echo "$cpu_usage_total" | sed 's/\.//g')
  
  # Umbrales para clasificaci√≥n
  power_threshold={{ power_threshold | default(50) }}  # M√°s de 50W se considera alto
  cpu_threshold={{ cpu_threshold | default(30) }}    # M√°s de 30% se considera alto
  
  # Calcular consumo por VM promedio
  if [ "$vm_count" -gt 0 ]; then
    power_per_vm=$(echo "scale=2; $power_total / $vm_count" | bc)
  else
    power_per_vm=0
  fi
  
  # Caso 1: Consumo bajo y CPU bajo
  if (( $(echo "$power_total < $power_threshold" | bc -l) )) && (( $(echo "$cpu_usage_total < $cpu_threshold" | bc -l) )); then
    echo "‚úÖ Estado √≥ptimo: El consumo energ√©tico y uso de CPU son bajos."
    echo "   Consumo por VM: ~$power_per_vm W"
  
  # Caso 2: Consumo alto pero CPU bajo
  elif (( $(echo "$power_total >= $power_threshold" | bc -l) )) && (( $(echo "$cpu_usage_total < $cpu_threshold" | bc -l) )); then
    echo "‚ö†Ô∏è Consumo elevado con bajo uso de CPU. Posibles causas:"
    echo "   - Procesos del sistema ineficientes"
    echo "   - Configuraci√≥n de energ√≠a sub√≥ptima"
    echo "   - Hardware antiguo o ineficiente"
    echo ""
    echo "   Recomendaciones:"
    echo "   - Ejecutar 'powertop --auto-tune' para optimizar consumo"
    echo "   - Verificar configuraci√≥n de CPU governor: 'cpupower frequency-info'"
    echo "   - Considerar ajustar intel_pstate a modo 'powersave'"
    echo "   - Revisar procesos del sistema con 'htop' o 'ps aux --sort=-%cpu'"
  
  # Caso 3: Consumo alto y CPU alto
  elif (( $(echo "$power_total >= $power_threshold" | bc -l) )) && (( $(echo "$cpu_usage_total >= $cpu_threshold" | bc -l) )); then
    echo "üî• Alto uso de recursos. Recomendaciones:"
    echo "   - Considerar migrar VMs entre nodos para balancear carga"
    echo "   - Evaluar si se pueden consolidar VMs en horarios valle"
    echo "   - Ajustar CPUs virtuales asignadas a las VMs"
    echo "   - Verificar si hay VMs con alta contenci√≥n de recursos"
    echo "   - Considerar usar cgroups para limitar recursos de VMs espec√≠ficas"
  
  # Caso 4: Consumo bajo pero CPU alto
  else
    echo "üîÑ Uso eficiente de recursos con alta carga de CPU."
    echo "   Buen rendimiento energ√©tico. Considerar:"
    echo "   - Monitorear temperaturas para evitar throttling"
    echo "   - Verificar si hay suficiente refrigeraci√≥n"
  fi
  
  echo ""
}

# Funci√≥n para iniciar el servidor HTTP para Prometheus
start_prometheus_exporter() {
  # Crear script Python para el servidor HTTP
  cat > /tmp/prometheus_exporter.py << 'EOF'
#!/usr/bin/env python3
import http.server
import socketserver
import os
import time
from urllib.parse import urlparse, parse_qs

PORT = {{ prometheus_port_proxmox | default(9200) }}
METRICS_FILE = "{{ metrics_file | default('/tmp/proxmox_power_metrics.prom') }}"

class PrometheusHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urlparse(self.path)
        if parsed_path.path == "/metrics":
            try:
                with open(METRICS_FILE, 'r') as file:
                    content = file.read()
                self.send_response(200)
                self.send_header("Content-type", "text/plain")
                self.end_headers()
                self.wfile.write(content.encode())
            except Exception as e:
                self.send_response(500)
                self.send_header("Content-type", "text/plain")
                self.end_headers()
                self.wfile.write(f"Error: {str(e)}".encode())
        else:
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(b"<html><head><title>Proxmox Power Metrics Exporter</title></head>")
            self.wfile.write(b"<body><h1>Proxmox Power Metrics Exporter</h1>")
            self.wfile.write(b"<p>Visit <a href='/metrics'>/metrics</a> for Prometheus metrics</p></body></html>")
    
    def log_message(self, format, *args):
        # Silenciar logs para evitar spam en la consola
        return

def run_server():
    with socketserver.TCPServer(("", PORT), PrometheusHandler) as httpd:
        print(f"Servidor iniciado en puerto {PORT}")
        httpd.serve_forever()

if __name__ == "__main__":
    run_server()
EOF

  # Hacer ejecutable el script
  chmod +x /tmp/prometheus_exporter.py
  
  # Verificar si ya hay un servidor en ejecuci√≥n
  if pgrep -f "python3 /tmp/prometheus_exporter.py" > /dev/null; then
    echo "üîÑ El servidor Prometheus ya est√° en ejecuci√≥n"
  else
    echo "üöÄ Iniciando servidor Prometheus en puerto 9200..."
    nohup python3 /tmp/prometheus_exporter.py > /dev/null 2>&1 &
    echo "‚úÖ Servidor iniciado. M√©tricas disponibles en http://localhost:9200/metrics"
  fi
  
  # Informar sobre la configuraci√≥n de Prometheus
  echo "‚ÑπÔ∏è Para configurar Prometheus, a√±ade lo siguiente a prometheus.yml:"
  echo ""
  echo "  - job_name: 'proxmox_power'"
  echo "    scrape_interval: 60s"
  echo "    static_configs:"
  echo "      - targets: ['$(hostname):9200']"
  echo ""
  echo "üìä Prometheus est√° configurado en 192.168.1.152"
}

# Funci√≥n principal
main() {
  # Verificar dependencias
  check_dependencies
  
  # Calcular consumo energ√©tico
  calculate_power_usage
  
  # Iniciar servidor para Prometheus
  start_prometheus_exporter
  
  echo "‚ú® Proceso completado. El servidor seguir√° ejecut√°ndose en segundo plano."
  echo "üîÑ Ejecuta este script peri√≥dicamente para actualizar las m√©tricas."
}

# Ejecutar funci√≥n principal
main