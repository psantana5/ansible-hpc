#!/usr/bin/env python3
# Weekly Cluster Efficiency Report
# Analyzes resource utilization and efficiency metrics for the past week

import os
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import subprocess
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from jinja2 import Template

# Configuration
OUTPUT_DIR = "/opt/reporting/output"
END_DATE = datetime.now()
START_DATE = END_DATE - timedelta(days=7)
REPORT_PERIOD = f"{START_DATE.strftime('%Y-%m-%d')}_to_{END_DATE.strftime('%Y-%m-%d')}"
EMAIL_RECIPIENTS = ["{{ admin_email | default('admin@' + base_domain) }}"]

# Create output directory if it doesn't exist
os.makedirs(OUTPUT_DIR, exist_ok=True)

def get_slurm_efficiency_data():
    """Retrieve SLURM accounting data for efficiency analysis"""
    start_str = START_DATE.strftime("%Y-%m-%d")
    end_str = END_DATE.strftime("%Y-%m-%d")
    
    cmd = [
        "sacct", 
        "-a",
        "--format=JobID,User,Account,Partition,State,Start,End,Elapsed,TotalCPU,ReqCPUS,AllocCPUS,ReqMem,MaxRSS,NodeList,NNodes",
        "-S", f"{start_str}T00:00:00", 
        "-E", f"{end_str}T23:59:59",
        "--parsable2"
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Error retrieving SLURM data: {e}")
        return None

def get_cluster_utilization():
    """Get overall cluster utilization data from sinfo"""
    cmd = ["sinfo", "--format=%C,%D", "--noheader"]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        # Parse the output which is in format "allocated/idle/other/total,nodes"
        data = result.stdout.strip().split(',')
        if len(data) >= 2:
            cpu_data = data[0].split('/')
            if len(cpu_data) >= 4:
                allocated = int(cpu_data[0])
                idle = int(cpu_data[1])
                other = int(cpu_data[2])
                total = int(cpu_data[3])
                
                return {
                    'allocated_cpus': allocated,
                    'idle_cpus': idle,
                    'other_cpus': other,
                    'total_cpus': total,
                    'utilization_pct': (allocated / total * 100) if total > 0 else 0
                }
    except subprocess.CalledProcessError as e:
        print(f"Error retrieving cluster utilization: {e}")
    
    return None

def process_efficiency_data(data):
    """Process the SLURM accounting data for efficiency metrics"""
    if not data:
        return None
    
    lines = data.strip().split('\n')
    headers = lines[0].split('|')
    
    rows = []
    for line in lines[1:]:
        if not line.strip():
            continue
        rows.append(line.split('|'))
    
    df = pd.DataFrame(rows, columns=headers)
    
    # Filter out batch job steps, keeping only the main job entries
    df = df[~df['JobID'].str.contains(r'\.', regex=True)]
    
    # Convert relevant columns to numeric
    numeric_cols = ['ReqCPUS', 'AllocCPUS', 'NNodes']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Parse elapsed time (format: [DD-]HH:MM:SS)
    def parse_elapsed(time_str):
        if not time_str or pd.isna(time_str):
            return 0
        
        days = 0
        if '-' in time_str:
            days_part, time_part = time_str.split('-')
            days = int(days_part)
        else:
            time_part = time_str
        
        hours, minutes, seconds = map(int, time_part.split(':'))
        return days * 86400 + hours * 3600 + minutes * 60 + seconds
    
    df['ElapsedSeconds'] = df['Elapsed'].apply(parse_elapsed)
    
    # Parse TotalCPU (format: [DD-]HH:MM:SS)
    df['TotalCPUSeconds'] = df['TotalCPU'].apply(parse_elapsed)
    
    # Calculate CPU efficiency (TotalCPU / (Elapsed * AllocCPUS))
    df['CPUEfficiency'] = np.where(
        (df['ElapsedSeconds'] > 0) & (df['AllocCPUS'] > 0),
        df['TotalCPUSeconds'] / (df['ElapsedSeconds'] * df['AllocCPUS']) * 100,
        0
    )
    
    # Parse memory usage
    def parse_mem(mem_str):
        if not mem_str or pd.isna(mem_str):
            return 0
        
        if 'K' in mem_str:
            return float(mem_str.replace('K', '')) / 1024  # Convert to MB
        elif 'M' in mem_str:
            return float(mem_str.replace('M', ''))
        elif 'G' in mem_str:
            return float(mem_str.replace('G', '')) * 1024  # Convert to MB
        elif 'T' in mem_str:
            return float(mem_str.replace('T', '')) * 1024 * 1024  # Convert to MB
        else:
            return float(mem_str)
    
    # Parse requested memory
    df['ReqMemMB'] = df['ReqMem'].apply(parse_mem)
    
    # Parse actual memory usage (MaxRSS)
    df['MaxRSSMB'] = df['MaxRSS'].apply(parse_mem)
    
    # Calculate memory efficiency (MaxRSS / ReqMem)
    df['MemEfficiency'] = np.where(
        df['ReqMemMB'] > 0,
        df['MaxRSSMB'] / df['ReqMemMB'] * 100,
        0
    )
    
    return df

def generate_efficiency_plots(df):
    """Generate efficiency analysis plots"""
    if df is None or df.empty:
        return None
    
    plots = {}
    
    # 1. CPU Efficiency Distribution
    plt.figure(figsize=(10, 6))
    plt.hist(df['CPUEfficiency'].clip(0, 100), bins=20, alpha=0.7)
    plt.title('CPU Efficiency Distribution')
    plt.xlabel('CPU Efficiency (%)')
    plt.ylabel('Number of Jobs')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    cpu_eff_plot_path = os.path.join(OUTPUT_DIR, f"cpu_efficiency_{REPORT_PERIOD}.png")
    plt.savefig(cpu_eff_plot_path)
    plots['cpu_efficiency'] = cpu_eff_plot_path
    
    # 2. Memory Efficiency Distribution
    plt.figure(figsize=(10, 6))
    plt.hist(df['MemEfficiency'].clip(0, 100), bins=20, alpha=0.7)
    plt.title('Memory Efficiency Distribution')
    plt.xlabel('Memory Efficiency (%)')
    plt.ylabel('Number of Jobs')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    mem_eff_plot_path = os.path.join(OUTPUT_DIR, f"mem_efficiency_{REPORT_PERIOD}.png")
    plt.savefig(mem_eff_plot_path)
    plots['mem_efficiency'] = mem_eff_plot_path
    
    # 3. Efficiency by Partition
    plt.figure(figsize=(12, 6))
    partition_efficiency = df.groupby('Partition')[['CPUEfficiency', 'MemEfficiency']].mean()
    partition_efficiency.plot(kind='bar')
    plt.title('Average Efficiency by Partition')
    plt.xlabel('Partition')
    plt.ylabel('Efficiency (%)')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend(['CPU Efficiency', 'Memory Efficiency'])
    plt.tight_layout()
    partition_eff_plot_path = os.path.join(OUTPUT_DIR, f"partition_efficiency_{REPORT_PERIOD}.png")
    plt.savefig(partition_eff_plot_path)
    plots['partition_efficiency'] = partition_eff_plot_path
    
    # 4. Efficiency by User (Top 10 users by job count)
    top_users = df['User'].value_counts().head(10).index
    user_efficiency = df[df['User'].isin(top_users)].groupby('User')[['CPUEfficiency', 'MemEfficiency']].mean()
    
    plt.figure(figsize=(12, 6))
    user_efficiency.plot(kind='bar')
    plt.title('Average Efficiency by User (Top 10)')
    plt.xlabel('User')
    plt.ylabel('Efficiency (%)')
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend(['CPU Efficiency', 'Memory Efficiency'])
    plt.tight_layout()
    user_eff_plot_path = os.path.join(OUTPUT_DIR, f"user_efficiency_{REPORT_PERIOD}.png")
    plt.savefig(user_eff_plot_path)
    plots['user_efficiency'] = user_eff_plot_path
    
    return plots

def generate_html_report(df, plots, cluster_util):
    """Generate an HTML report with the efficiency data and plots"""
    if df is None or df.empty:
        return "No data available for the specified period."
    
    # Calculate overall statistics
    total_jobs = len(df)
    avg_cpu_efficiency = df['CPUEfficiency'].mean()
    avg_mem_efficiency = df['MemEfficiency'].mean()
    
    # Identify inefficient jobs (less than 50% CPU or memory efficiency)
    inefficient_cpu_jobs = df[df['CPUEfficiency'] < 50]
    inefficient_mem_jobs = df[df['MemEfficiency'] < 50]
    
    # Template for the HTML report
    html_template = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Weekly Cluster Efficiency Report - {{ report_period }}</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            h1, h2, h3 { color: #2c3e50; }
            table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            tr:nth-child(even) { background-color: #f9f9f9; }
            .stats { display: flex; justify-content: space-between; margin-bottom: 20px; }
            .stat-box { background-color: #f8f9fa; border-radius: 5px; padding: 15px; width: 22%; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .plot-container { margin-bottom: 30px; }
            .plot-image { max-width: 100%; height: auto; }
            .warning { color: #e74c3c; }
            .good { color: #27ae60; }
            .medium { color: #f39c12; }
            .recommendations { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 20px; }
        </style>
    </head>
    <body>
        <h1>Weekly Cluster Efficiency Report</h1>
        <p>Report Period: {{ start_date }} to {{ end_date }}</p>
        
        <h2>Cluster Utilization Summary</h2>
        {% if cluster_util %}
        <div class="stats">
            <div class="stat-box">
                <h3>Overall Utilization</h3>
                <p class="{% if cluster_util.utilization_pct > 75 %}good{% elif cluster_util.utilization_pct > 50 %}medium{% else %}warning{% endif %}">
                    {{ cluster_util.utilization_pct|round(1) }}%
                </p>
            </div>
            <div class="stat-box">
                <h3>Allocated CPUs</h3>
                <p>{{ cluster_util.allocated_cpus }} / {{ cluster_util.total_cpus }}</p>
            </div>
            <div class="stat-box">
                <h3>Idle CPUs</h3>
                <p>{{ cluster_util.idle_cpus }}</p>
            </div>
            <div class="stat-box">
                <h3>Other CPUs</h3>
                <p>{{ cluster_util.other_cpus }}</p>
            </div>
        </div>
        {% else %}
        <p>Cluster utilization data not available.</p>
        {% endif %}
        
        <h2>Job Efficiency Summary</h2>
        <div class="stats">
            <div class="stat-box">
                <h3>Total Jobs</h3>
                <p>{{ total_jobs }}</p>
            </div>
            <div class="stat-box">
                <h3>Avg CPU Efficiency</h3>
                <p class="{% if avg_cpu_efficiency > 75 %}good{% elif avg_cpu_efficiency > 50 %}medium{% else %}warning{% endif %}">
                    {{ avg_cpu_efficiency|round(1) }}%
                </p>
            </div>
            <div class="stat-box">
                <h3>Avg Memory Efficiency</h3>
                <p class="{% if avg_mem_efficiency > 75 %}good{% elif avg_mem_efficiency > 50 %}medium{% else %}warning{% endif %}">
                    {{ avg_mem_efficiency|round(1) }}%
                </p>
            </div>
            <div class="stat-box">
                <h3>Inefficient Jobs</h3>
                <p class="{% if (inefficient_cpu_jobs|length + inefficient_mem_jobs|length) / (2 * total_jobs) < 0.25 %}good{% elif (inefficient_cpu_jobs|length + inefficient_mem_jobs|length) / (2 * total_jobs) < 0.5 %}medium{% else %}warning{% endif %}">
                    CPU: {{ inefficient_cpu_jobs|length }} ({{ (inefficient_cpu_jobs|length / total_jobs * 100)|round(1) }}%)<br>
                    Mem: {{ inefficient_mem_jobs|length }} ({{ (inefficient_mem_jobs|length / total_jobs * 100)|round(1) }}%)
                </p>
            </div>
        </div>
        
        <h2>Efficiency Analysis</h2>
        {% if plots %}
            {% if plots.cpu_efficiency %}
            <div class="plot-container">
                <h3>CPU Efficiency Distribution</h3>
                <img src="cid:cpu_efficiency" class="plot-image" />
            </div>
            {% endif %}
            
            {% if plots.mem_efficiency %}
            <div class="plot-container">
                <h3>Memory Efficiency Distribution</h3>
                <img src="cid:mem_efficiency" class="plot-image" />
            </div>
            {% endif %}
            
            {% if plots.partition_efficiency %}
            <div class="plot-container">
                <h3>Efficiency by Partition</h3>
                <img src="cid:partition_efficiency" class="plot-image" />
            </div>
            {% endif %}
            
            {% if plots.user_efficiency %}
            <div class="plot-container">
                <h3>Efficiency by User (Top 10)</h3>
                <img src="cid:user_efficiency" class="plot-image" />
            </div>
            {% endif %}
        {% else %}
            <p>No efficiency plots available.</p>
        {% endif %}
        
        <h2>Inefficient Jobs (Top 10 by CPU Time)</h2>
        {% if inefficient_jobs_table %}
            {{ inefficient_jobs_table|safe }}
        {% else %}
            <p>No inefficient jobs data available.</p>
        {% endif %}
        
        <div class="recommendations">
            <h2>Recommendations</h2>
            <ul>
                {% if avg_cpu_efficiency < 50 %}
                <li class="warning">Overall CPU efficiency is low. Consider reviewing job resource requests and providing user training on efficient resource utilization.</li>
                {% endif %}
                
                {% if avg_mem_efficiency < 50 %}
                <li class="warning">Overall memory efficiency is low. Users may be over-requesting memory resources.</li>
                {% endif %}
                
                {% if cluster_util and cluster_util.utilization_pct < 50 %}
                <li class="warning">Cluster utilization is below 50%. Consider reviewing scheduling policies or promoting cluster usage.</li>
                {% endif %}
                
                {% if inefficient_users %}
                <li>Users with consistently inefficient jobs may benefit from targeted training:
                    <ul>
                        {% for user in inefficient_users %}
                        <li>{{ user }}</li>
                        {% endfor %}
                    </ul>
                </li>
                {% endif %}
            </ul>
        </div>
        
        <footer>
            <p>Generated automatically by the HPC Cluster Reporting System</p>
        </footer>
    </body>
    </html>
    """
    
    # Identify users with consistently inefficient jobs
    user_efficiency = df.groupby('User')[['CPUEfficiency', 'MemEfficiency']].mean()
    inefficient_users = user_efficiency[
        (user_efficiency['CPUEfficiency'] < 40) | 
        (user_efficiency['MemEfficiency'] < 40)
    ].index.tolist()
    
    # Create a subset of inefficient jobs for the table
    combined_inefficient = pd.concat([
        inefficient_cpu_jobs.sort_values('TotalCPUSeconds', ascending=False).head(5),
        inefficient_mem_jobs.sort_values('TotalCPUSeconds', ascending=False).head(5)
    ]).drop_duplicates()
    
    inefficient_jobs_table = combined_inefficient[
        ['JobID', 'User', 'Partition', 'CPUEfficiency', 'MemEfficiency', 'Elapsed', 'AllocCPUS', 'ReqMem', 'MaxRSS']
    ].sort_values('TotalCPUSeconds', ascending=False).head(10).to_html(index=False)
    
    # Render the template
    template = Template(html_template)
    html_content = template.render(
        report_period=REPORT_PERIOD,
        start_date=START_DATE.strftime('%Y-%m-%d'),
        end_date=END_DATE.strftime('%Y-%m-%d'),
        total_jobs=total_jobs,
        avg_cpu_efficiency=avg_cpu_efficiency,
        avg_mem_efficiency=avg_mem_efficiency,
        inefficient_cpu_jobs=inefficient_cpu_jobs,
        inefficient_mem_jobs=inefficient_mem_jobs,
        plots=plots,
        inefficient_jobs_table=inefficient_jobs_table,
        cluster_util=cluster_util,
        inefficient_users=inefficient_users
    )
    
    # Save the HTML report
    report_path = os.path.join(OUTPUT_DIR, f"weekly_efficiency_report_{REPORT_PERIOD}.html")
    with open(report_path, 'w') as f:
        f.write(html_content)
    
    return report_path

def send_email_report(report_path, plots):
    """Send the report via email"""
    if not os.path.exists(report_path):
        print(f"Report file not found: {report_path}")
        return False
    
    try:
        # Create message
        msg = MIMEMultipart()
        msg['From'] = '{{ smtp_from | default("hpc-reports@" + base_domain) }}'
        msg['To'] = ', '.join(EMAIL_RECIPIENTS)
        msg['Subject'] = f'Weekly HPC Cluster Efficiency Report - {REPORT_PERIOD}'
        
        # Attach HTML report
        with open(report_path, 'r') as f:
            html_content = f.read()
        
        msg.attach(MIMEText(html_content, 'html'))
        
        # Attach plot images
        if plots:
            for plot_type, plot_path in plots.items():
                with open(plot_path, 'rb') as f:
                    img_attachment = MIMEApplication(f.read(), _subtype="png")
                    img_attachment.add_header('Content-ID', f'<{plot_type}>')
                    img_attachment.add_header('Content-Disposition', 'inline', filename=os.path.basename(plot_path))
                    msg.attach(img_attachment)
        
        # Send email
        with smtplib.SMTP('{{ smtp_server | default("localhost") }}', {{ smtp_port | default(25) }}) as server:
            {% if smtp_use_tls | default(false) %}
            server.starttls()
            {% endif %}
            {% if smtp_username is defined and smtp_password is defined %}
            server.login('{{ smtp_username }}', '{{ smtp_password }}')
            {% endif %}
            server.send_message(msg)
        
        print(f"Email report sent successfully to {', '.join(EMAIL_RECIPIENTS)}")
        return True
    
    except Exception as e:
        print(f"Error sending email: {e}")
        return False

def main():
    # Get cluster utilization data
    cluster_util = get_cluster_utilization()
    
    # Get SLURM efficiency data
    slurm_data = get_slurm_efficiency_data()
    
    # Process the data
    df = process_efficiency_data(slurm_data)
    
    if df is None or df.empty:
        print("No SLURM data available for the specified period.")
        sys.exit(1)
    
    # Generate plots
    plots = generate_efficiency_plots(df)
    
    # Generate HTML report
    report_path = generate_html_report(df, plots, cluster_util)
    
    # Send email report
    send_email_report(report_path, plots)

if __name__ == "__main__":
    main()