---
- name: Update dnf cache
  ansible.builtin.dnf:
    update_cache: yes
    # Removed unsupported parameter: cache_only

- name: Install OpenLDAP packages
  ansible.builtin.dnf:
    name:
      - openldap-servers  # Contains slapd binary
      - openldap
      - openldap-clients
      - openldap-devel
    state: present

- name: Create LDAP system group
  ansible.builtin.group:
    name: ldap
    state: present
    system: yes
    gid: 55

- name: Create LDAP system user
  ansible.builtin.user:
    name: ldap
    state: present
    system: yes
    uid: 55
    group: ldap
    home: /var/lib/ldap
    create_home: no
    shell: /sbin/nologin

- name: Create OpenLDAP data directory
  file:
    path: /var/lib/ldap
    state: directory
    owner: ldap
    group: ldap
    mode: '0750'

- name: Create OpenLDAP config directory
  file:
    path: /etc/openldap/slapd.d
    state: directory
    owner: ldap
    group: ldap
    mode: '0750'

- name: Create slapd environment directory
  ansible.builtin.file:
    path: /etc/sysconfig
    state: directory
    mode: '0755'

- name: Create slapd environment configuration
  ansible.builtin.copy:
    dest: /etc/sysconfig/slapd
    content: |
      SLAPD_OPTIONS="-F /etc/openldap/slapd.d"
    owner: root
    group: root
    mode: '0644'
  notify: daemon-reload

- name: Copy slapd.conf template
  template:
    src: slapd.conf.j2
    dest: /etc/openldap/slapd.conf
    owner: root
    group: root
    mode: '0640'
  notify: restart slapd

- name: Copy LDIF template for initial setup
  template:
    src: initial.ldif.j2
    dest: /etc/openldap/initial.ldif
    owner: ldap
    group: ldap
    mode: '0640'

- name: Check if slapd service file exists
  ansible.builtin.stat:
    path: /usr/lib/systemd/system/slapd.service  # Verify this path matches your OS
    get_checksum: no
  register: slapd_service_file

- name: Create slapd systemd service file
  ansible.builtin.template:
    src: slapd.service.j2
    dest: /usr/lib/systemd/system/slapd.service
    mode: '0644'
  when: not slapd_service_file.stat.exists
  notify:
    - daemon-reload
    - restart slapd

- name: Start and enable slapd service
  ansible.builtin.systemd:
    name: slapd
    state: started
    enabled: "{{ ldap_enable_service | default(true) }}"
  when: ldap_start_service | default(true) | bool
  notify: restart slapd

- name: Wait for slapd to be ready
  wait_for:
    host: "{{ ansible_default_ipv4.address | default('0.0.0.0') }}"
    port: 389
    timeout: 30
    state: started
  when: ldap_start_service | default(true) | bool

- name: Stop slapd service before database initialization
  service:
    name: slapd
    state: stopped

- name: Remove existing database files
  file:
    path: /var/lib/ldap
    state: absent

- name: Create new database directory
  file:
    path: /var/lib/ldap
    state: directory
    owner: ldap
    group: ldap
    mode: '0750'

- name: Create DB_CONFIG file
  copy:
    content: |
      set_cachesize 0 2097152 0
      set_lk_max_objects 1500
      set_lk_max_locks 1500
      set_lk_max_lockers 1500
      set_flags DB_LOG_AUTOREMOVE
    dest: /var/lib/ldap/DB_CONFIG
    owner: ldap
    group: ldap
    mode: '0640'

- name: Generate slapd configuration from slapd.conf
  command: slaptest -f /etc/openldap/slapd.conf -F /etc/openldap/slapd.d
  become: yes
  become_user: ldap
  environment:
    HOME: /var/lib/ldap
  args:
    creates: /etc/openldap/slapd.d/cn=config.ldif

- name: Initialize OpenLDAP database
  command: slapadd -F /etc/openldap/slapd.d -b "{{ ldap_base_dn }}" -l /etc/openldap/initial.ldif
  become: yes
  become_user: ldap
  environment:
    HOME: /var/lib/ldap

- name: Set permissions on slapd directories
  file:
    path: "{{ item }}"
    owner: ldap
    group: ldap
    mode: '0750'
    recurse: yes
  loop:
    - /var/lib/ldap
    - /etc/openldap/slapd.d

- name: Start slapd service
  service:
    name: slapd
    state: started
  when: ldap_start_service | default(true) | bool

- name: Create admin password hash
  command: slappasswd -s "{{ ldap_admin_password }}"
  register: admin_password_hash
  no_log: true

- name: Configure admin password
  ldap_entry:
    dn: "{{ ldap_root_dn }}"
    objectClass: organizationalRole
    objectClass: simpleSecurityObject
    cn: admin
    userPassword: "{{ admin_password_hash.stdout }}"
  become: yes

- name: Copy users and groups LDIF template
  template:
    src: users_groups.ldif.j2
    dest: /etc/openldap/users_groups.ldif
    owner: ldap
    group: ldap
    mode: '0640'

- name: Import users and groups
  command: ldapadd -x -D "{{ ldap_root_dn }}" -w "{{ ldap_admin_password }}" -f /etc/openldap/users_groups.ldif
  become: yes
  no_log: true