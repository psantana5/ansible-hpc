---
- name: Test SLURM Reporting Integration
  hosts: slurmctld
  become: true
  vars_files:
    - /home/psantana/playbooks-slurm/inventory/group_vars/all/main.yml
  vars:
    test_errors: []
  tasks:
    - name: Ensure reporting directory exists
      file:
        path: /opt/reporting
        state: directory
        mode: "0755"
      ignore_errors: true
      register: dir_result

    - name: Ensure output directory exists
      file:
        path: /opt/reporting/output
        state: directory
        mode: "0755"
      ignore_errors: true
      register: output_dir_result

    - name: Fix Jinja2 template syntax in Python scripts
      replace:
        path: "/opt/reporting/{{ item }}"
        regexp: "{%\\s*if\\s+smtp_use_tls\\s*\\|\\s*default\\(false\\)\\s*%}"
        replace: "if smtp_use_tls:"
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Fix else statements in Python scripts
      replace:
        path: "/opt/reporting/{{ item }}"
        regexp: "{%\\s*else\\s*%}"
        replace: "else:"
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Fix endif statements in Python scripts
      replace:
        path: "/opt/reporting/{{ item }}"
        regexp: "{%\\s*endif\\s*%}"
        replace: ""
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Check if Python packages are installed
      command: pip3 list
      register: pip_list
      changed_when: false
      ignore_errors: true

    - name: Check for required Python packages
      set_fact:
        missing_packages: "{{ ['pandas', 'matplotlib', 'jinja2', 'sqlalchemy'] | select('regex', '^(?!.*' + pip_list.stdout + ').*$') | list }}"
      ignore_errors: true
      when: pip_list is defined and pip_list.stdout is defined

    - name: Record Python package errors
      set_fact:
        test_errors: "{{ test_errors + ['Missing Python packages: ' + missing_packages | join(', ')] }}"
      when: missing_packages is defined and missing_packages | length > 0

    - name: Check if reporting scripts exist
      find:
        paths: /opt/reporting
        patterns: "*.py"
      register: script_check
      ignore_errors: true

    - name: Record script errors
      set_fact:
        test_errors: "{{ test_errors + ['Reporting scripts are missing. Found only ' + script_check.matched | string + ' scripts'] }}"
      when: script_check.matched is defined and script_check.matched < 3

    - name: Create test directory for Python scripts
      file:
        path: "/home/psantana/playbooks-slurm/tests/reporting_scripts"
        state: directory
        mode: "0755"
      ignore_errors: true

    - name: Copy reporting scripts to test directory
      copy:
        src: "/opt/reporting/{{ item }}"
        dest: "/home/psantana/playbooks-slurm/tests/reporting_scripts/{{ item }}"
        remote_src: yes
        mode: "0755"
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Fix Jinja2 template syntax in test Python scripts
      replace:
        path: "/home/psantana/playbooks-slurm/tests/reporting_scripts/{{ item }}"
        regexp: "{%\\s*if\\s+smtp_use_tls\\s*\\|\\s*default\\(false\\)\\s*%}"
        replace: "if True:"
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Fix else statements in test Python scripts
      replace:
        path: "/home/psantana/playbooks-slurm/tests/reporting_scripts/{{ item }}"
        regexp: "{%\\s*else\\s*%}"
        replace: "else:"
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Fix endif statements in test Python scripts
      replace:
        path: "/home/psantana/playbooks-slurm/tests/reporting_scripts/{{ item }}"
        regexp: "{%\\s*endif\\s*%}"
        replace: ""
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Fix variable references in test Python scripts
      replace:
        path: "/home/psantana/playbooks-slurm/tests/reporting_scripts/{{ item }}"
        regexp: "{{\\s*([a-zA-Z0-9_]+)\\s*}}"
        replace: "\"\\1_value\""
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Fix variable references with filters in test Python scripts
      replace:
        path: "/home/psantana/playbooks-slurm/tests/reporting_scripts/{{ item }}"
        regexp: "{{\\s*([a-zA-Z0-9_]+)\\s*\\|\\s*[^}]+\\s*}}"
        replace: "\"\\1_value\""
      with_items:
        - daily_usage_report.py
        - weekly_efficiency_report.py
        - monthly_billing_report.py
      ignore_errors: true

    - name: Run test version of daily usage report script
      command: python3 /home/psantana/playbooks-slurm/tests/reporting_scripts/daily_usage_report.py
      register: test_daily_report
      changed_when: false
      ignore_errors: true

    - name: Run test version of weekly efficiency report script
      command: python3 /home/psantana/playbooks-slurm/tests/reporting_scripts/weekly_efficiency_report.py
      register: test_weekly_report
      changed_when: false
      ignore_errors: true

    - name: Run test version of monthly billing report script
      command: python3 /home/psantana/playbooks-slurm/tests/reporting_scripts/monthly_billing_report.py
      register: test_monthly_report
      changed_when: false
      ignore_errors: true

    - name: Run daily usage report script
      command: python3 /opt/reporting/daily_usage_report.py
      register: daily_report
      changed_when: false
      ignore_errors: true

    - name: Record daily report errors
      set_fact:
        test_errors: "{{ test_errors + ['Daily report failed: ' + daily_report.stderr] }}"
      when: daily_report.rc is defined and daily_report.rc != 0

    - name: Run weekly efficiency report script
      command: python3 /opt/reporting/weekly_efficiency_report.py
      register: weekly_report
      changed_when: false
      ignore_errors: true

    - name: Record weekly report errors
      set_fact:
        test_errors: "{{ test_errors + ['Weekly report failed: ' + weekly_report.stderr] }}"
      when: weekly_report.rc is defined and weekly_report.rc != 0

    - name: Run monthly billing report script
      command: python3 /opt/reporting/monthly_billing_report.py
      register: monthly_report
      changed_when: false
      ignore_errors: true

    - name: Record monthly report errors
      set_fact:
        test_errors: "{{ test_errors + ['Monthly report failed: ' + monthly_report.stderr] }}"
      when: monthly_report.rc is defined and monthly_report.rc != 0

    - name: Check for generated report files
      find:
        paths: /opt/reporting/output
        patterns: "*.html"
      register: report_files
      ignore_errors: true

    - name: Record report file errors
      set_fact:
        test_errors: "{{ test_errors + ['No report files were generated'] }}"
      when: report_files.matched is defined and report_files.matched == 0

    - name: Display test results
      debug:
        msg: "All tests completed successfully!"
      when: test_errors | length == 0

    - name: Display test errors
      debug:
        msg: "The following errors were encountered during testing:\n{{ test_errors | join('\n') }}"
      when: test_errors | length > 0

    - name: Write test results to file
      copy:
        content: "{{ 'Test Results: ' + ansible_date_time.iso8601 + '\n\n' + (test_errors | join('\n') if test_errors | length > 0 else 'All tests passed successfully!') }}"
        dest: "/opt/reporting/test_results_{{ ansible_date_time.date }}.log"
      ignore_errors: true